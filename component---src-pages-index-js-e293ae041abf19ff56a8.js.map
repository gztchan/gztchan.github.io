{"version":3,"sources":["webpack:///./src/layouts/main.js","webpack:///./src/pages/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./node_modules/@babel/runtime/helpers/objectDestructuringEmpty.js","webpack:///./src/components/avatar/index.js","webpack:///./src/components/header/index.js","webpack:///./src/components/seo.js"],"names":["MainLayout","_ref","children","_2160734327","data","Object","core_browser_esm","react_default","a","Fragment","propTypes","PropTypes","node","isRequired","query","IndexPage","main","seo","title","className","indexStyles","indexWrap","style","position","top","transform","header","m","module","exports","require","default","React","createContext","object","string","func","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","assign","json","shape","pathname","obj","TypeError","Avatar","objectDestructuringEmpty_default","_1891962723","avatarStyles","wrap","src","site","siteMetadata","author","avatar","alt","Header","siteTitle","_3564895773","background","headerStyle","text","fontSize","marginBottom","name","description","textAlign","nav","map","l","padding","margin","display","gatsby_browser_entry","to","path","defaultProps","SEO","lang","meta","_public_static_d_1464412309_json__WEBPACK_IMPORTED_MODULE_2__","metaDescription","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_5___default","htmlAttributes","titleTemplate","content","property","concat","arrayOf"],"mappings":"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","file":"component---src-pages-index-js-e293ae041abf19ff56a8.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst MainLayout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteMainPageData {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <div>\n        <main>{children}</main>\n      </div>\n    </>\n  )\n}\n\nMainLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default MainLayout\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Link } from \"gatsby\"\n\nimport MainLayout from \"../layouts/main\"\nimport Header from \"../components/header\"\nimport SEO from \"../components/seo\"\n\nimport indexStyles from \"../styles/index.module.css\"\n\nconst IndexPage = ({ data }) => (\n  <MainLayout>\n    <SEO title=\"Artsypunk\" />\n    <div className={indexStyles.indexWrap}>\n      <div style={{ position: 'relative', top: '50%', transform: 'translateY(-50%)' }}>\n        <Header />\n      </div>\n    </div>\n  </MainLayout>\n)\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        nav {\n          name\n          path\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}\n\nmodule.exports = _objectDestructuringEmpty;","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport avatarStyles from './avatar.module.css'\n\nconst Avatar = ({}) => {\n  const data = useStaticQuery(graphql`\n    query AvatarQuery {\n      site {\n        siteMetadata {\n          author {\n            avatar\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <>\n      <div className={avatarStyles.wrap}>\n        <img src={data.site.siteMetadata.author.avatar} alt={true} />\n      </div>\n    </>\n  )\n}\n\nexport default Avatar\n","import { useStaticQuery, graphql, Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nimport Avatar from '../avatar'\n\nimport headerStyle from './header.module.css'\n\nconst Header = ({ siteTitle }) => {\n  const data = useStaticQuery(graphql`\n    query HeaderQuery {\n      site {\n        siteMetadata {\n          description\n          author {\n            name\n          }\n          nav {\n            name\n            path\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <header style={{ background: `#f7f7f7` }}>\n      <div>\n        <Avatar />\n        <div className={headerStyle.text}>\n          <p style={{ fontSize: '1rem', marginBottom: '1rem' }}>{data.site.siteMetadata.author.name}</p>\n          <p>{data.site.siteMetadata.description}</p>\n        </div>\n        <nav style={{ textAlign: 'center'}}>\n          <ul>\n            {data.site.siteMetadata.nav.map(l => {\n              return <li style={{ padding: '20px 10px', margin: '0 10px', display: 'inline-block' }}><Link to={l.path} >{l.name}</Link></li>\n            })}\n          </ul>\n        </nav>\n      </div>\n    </header>\n  )\n}\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author {\n              name\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author.name,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}